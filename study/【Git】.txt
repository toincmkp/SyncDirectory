【Git】

------------------------------------------------------------------------------------------------------------------------
概要
　　バージョン管理システム
　　昔の履歴を管理
　　別の機能を同時開発するために別バージョンを同時管理するのを手助け
　　基本的には一つのプロジェクト単位で管理(Webシステム等)

　　公式サイト
　　　　https://git-scm.com

　　ドキュメンテーション(公式：日本語)
　　　　https://git-scm.com/book/ja/v2

------------------------------------------------------------------------------------------------------------------------
gitの簡易フロー
　　1. 作業ディレクトリ
　　2. ステージングエリア
　　3. リポジトリ(ローカル、リモート)、gitディレクトリ

利用方法
　　前提条件
　　　　gitのインストール
　　　　　　sudo apt-get install git
　　　　　　sudo yum install git

　　gitの設定関係
　　　　初回、データを保存時に名前とE-mailの設定が必須
　　　　　　git config --glbal user.name "[任意]"
　　　　　　git config --glbal user.email "[任意]"

　　　　gitのメッセージの色分け


　　　　設定一覧表示
　　　　　　git config -l

　　　　ディレクトリのgit利用宣言
　　　　　　(gitとして管理するディレクトリ内で)git init

　　ステージングエリアへの追加(ステージングエリアの実態はファイル)
　　　　git add [ファイル名]
　　　　git add [ファイル名] [ファイル名]

　　リポジトリへの追加
　　　　git commit
　　　　[message]

　　　　一々メッセージを入力するのが面倒な場合
　　　　　　git commit -m "[任意のメッセージ]"

　　　　直前のコミットを変更(大した変更でもないものをログに残したくない場合等)
　　　　　　git commit --amend

　　　　addとcommitを同時
　　　　　　git commit -am "[任意のメッセージ]"

　　履歴の確認
　　　　通常
　　　　　　git log

　　　　簡易
　　　　　　git log --oneline

　　　　変更された場所を具体的に表示
　　　　　　git log -p

　　　　どのファイルが何箇所変わったか
　　　　　　git log --stat

　　フローの状態確認
　　　　次に何をすればいいかのできることを表示
　　　　　　git status

　　ファイルを一つ前のcommitされた状態へ戻す
　　　　git checkout -- [ファイル名]

　　一つ前のcommitされた状態(ステージングエリアへまだ上げてないもの)との違いの確認
　　　　git diff
　　　　※下記との違い要確認

　　一つ前のcommitされた状態(ステージングエリアへまだ上げたもの)との違いの確認
　　　　git diff -cached
　　　　※上記との違い要確認

　　ディレクトリ内のファイルを全てadd
　　　　git add .

　　gitディレクトリないのディレクトリやファイルの移動や削除はgitコマンドにて利用する
　　　　git rm [ファイル名]
　　　　git mv [ファイル名] [場所やファイル名等]

　　git管理下のディレクトリでgit管理しないファイルについての操作
　　　　vim .gitignoreとして編集(そこから下の階層すべてに反映)
　　　　.gitignoreはサブディレクトリ内にも適応

　　　　編集内容
　　　　　　ファイルの無視
　　　　　　　　*.log

　　過去のバージョンに戻る
　　　　ハッシュ値の確認
　　　　　　git log

　　　　ステージングエリアも作業ディレクトリも全てある状態のリポジトリの状態に戻す
　　　　　　git reset --hard [戻したい状態のリポジトリのハッシュ値]

　　　　ステージングエリアも作業ディレクトリも直前のリポジトリの状態に戻す
　　　　　　git reset --hard HEAD

　　　　リセットをかける一つ前の状態に戻る
　　　　　　git reset --hard ORIG_HEAD

　　ブランチ
　　　　概要
　　　　　　ブランチを別でやれば元のブランチとは別で開発できる

　　　　自分のブランチを確認
　　　　　　git branch

　　　　ブランチの作成
　　　　　　git branch [ブランチ名]

　　　　ブランチの移動
　　　　　　git checkout hoge

　　　　　　作成と移動を同時に
　　　　　　　　git checkout -b [ブランチ名]

　　　　ブランチの統合(マージ)
　　　　　　git merge [統合したいブランチ名]

　　　　ブランチの削除
　　　　　　git branch -d [削除したブランチ名]

　　マージの衝突
　　　　同じところを別のブランチ同士で修正したうえでそのブランチ同士をマージ
　　　　結果としてはできずに終わる

　　　　解決
　　　　　　ぶつかったファイル内にてどこからどこまでが衝突してるか書かれているので
　　　　　　その部分を修正したうえで add して commit で解決

　　タグ
　　　　概要
　　　　　　commit id に対してわかりやすい名前をつける

　　　　作成
　　　　　　直近のコミットにタグ付け
　　　　　　　　git tag v1.0

　　　　　　二つ前
　　　　　　　　git tag v0.9 ハッシュ値

　　　　表示
　　　　　　一覧表示
　　　　　　　　git tag

　　　　　　表示
　　　　　　　　git show [タグ名]

　　　　削除
　　　　　　git tag -d v0.9

　　エイリアスの作成
　　　　git config --global alias.[エイリアス名] [コマンド名]

　　　　確認
　　　　　　git config -l

　　共有リポジトリについて
　　　　利用宣言
　　　　　　git init --bare
　　　　　　　　管理ファイルだけが管理される、commit等はない

　　　　別のリポジトリに対してのステージングエリアの追加
　　　　　　git remote add [これから扱いたいリポジトリ先の自分で使うための名前] リポジトリ先の場所

　　　　共有リポジトリの中身を自身のディレクトリ内に作成
　　　　　　git clone [どこから] [どこに]

　　　　　　※clone時はリモート先が引き継がれる

　　　　共有リポジトリ内のデータを自分のディレクトリと同期
　　　　　　git pull origin master
　　　　　　→やっていることは自分のところでマージ
　　　　　　　つまりエラー時はここでどうにかする



